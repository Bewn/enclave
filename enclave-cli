#!/usr/bin/env sh

##############################------------source code-----------##############################
##~****~**~~*~*~*~*~**~**~*~*~****~*~*~*~*~***~*~*~***~*~*~***~**~*~*~****~*~*~*~*~***~*~*~*~*


#####################################################|
######## run header #################################|
############ eatablishes variables ##################|
#####################################################|

if [ ! -d  $HOME/.enclave] ;
	then mkdir $HOME/.enclave ;
fi

# get fresh loop dev name
ENCLAVE_loop="$(sudo losetup -f)"

# working directory is current run directory if possible
if [ ! -w $PWD ] ;
    then mkdir $HOME/.enclave/workdir 
    twd=$HOME/.enclave/work-dir ; # temp work dir
	else twd=$PWD
fi

#name for enclave 
ENCLAVE_name=$twd/a.rngd  #~*~*~*# enclave random. disordered // aranged

fancy_line () {
echo "~****~**~~*~*~*~*~**~**~*~*~****~*~*~*~*~***~*~*~***~*~*~***~**~*~*~****~*~*~*~*~***~*~*~*~**~*~*~**"
}


help () {
	echo "		This is the enclave cli help panel
			usage:
				 enclave-cli [ command ]
				 enclave-cli [ -o | --OPTION ][ < path to *.rnd > ]
				 
				 commands:
				   g, generate : to generate an enclave
				   c, config   : to edit, init, config, etc.				 
				 options:
				  -f, --file  FILE
				  -h, --help "
}

generate_rnd_file () {
	read -p "            desired size? 
                    enter e.g. '1' for 1*(2^10)^2 Bytes (=1MiB) or '4K' (=4000) for 4GiB
                    enter now: " input

			
		  	rnd=$twd/$ENCLAVE_name
			echo "writing random (indeciferable) data to $ENCLAVE_name"
	dd if=/dev/urandom of=$rnd bs=1024 count="$input"x1024 status=progress
	echo "
			You have now created a raw random to-be-arranged enclave file
			hence it's name is jumbled but with inferred meaning."
}

add_to_lvm () {
	read -p "		
					would you like to add $USER to the logical volume management (lvm) group?
					if yes then you will only need to authenticate now and to decrypt the first time.
					[Y/n]" input
		case $input in 
			'Y'|'y'|'') sudo usermod -a -G lvm $USER 
						echo "added to lvm group" ;;
			'N'|'n') echo "dnot adding to lvm group" ;;
		esac
}

make_fs_on_rnd () {
	if [ ! -z $($1 | grep .rnd) ] ;
		then mkfs.btrfs $1 ;
	fi
}

randomly_generate_unique_key () {
	echo "
		we will now generate a precisely reproducable simple unicode key file
		this file will be the encryption key for the enclave. Keep it safe and secure.
		It is 10,000 lines of length 64 characters each.
		It is generated from $twd/random-seed 
		and stored at $twd/unicode-unique-key
		...
		..
		.
		..
		..."
	dd if=/dev/urandom of=$twd/random-seed bs=64 count=100K status=progress/
	cat $twd/random-seed | tr -dc 'a-zA-Z0-9~!@#$%^&*_' | fold -w 64 | head -n 10000 > $twd/unicode-uqique-key
}

create_loop_device () {
	#with random encl.rnd as disk file
	sudo losetup --direct-io=on $ENCLAVE_LOOP $ENCLAVE_FILE
}

format_rnd_fs () {
	## overwrites the random file with filesystem encrypted with out univode key
	sudo cryptsetup luksFormat --type luks2 $ENCLAVE_LOOP $twd/unicode-unique-key
}

activate_enclave_fs () {
	echo "	activating encrypted enclave with unicode-unique-key"
	sudo bash -c "
	     losetup --direct-io=on $ENCLAVE_LOOP $ENCLAVE_FILE
	     cryptsetup open $ENCLAVE_LOOP --type=luks2 enc --key-file $twd/unicode-unique-key
	     lvscan
	     "
}

setup_logical_volume () {
	if [ -z "$(sudo pvs)" ];
		 then sudo pvcreate /dev/mapper/enc ;
	fi
	if [ -z "$(sudo vgs)" ];
		then sudo vgcreate enc /dev/mapper/enc ;
	fi
	if [ -z "$(sudo lvs)" ];
    		then sudo lvcreate -n benclave -l 100%FREE enc ;
	fi
}

deactivate_enclave () {
   sudo bash -c "lvchange -an enc
   		 cryptsetup close enc
   		 losetup -D"
} 

config_procedure () {
	read -p "			 	configure? 

									[Y/n] " input
	case $input in
		y|Y|'') add_to_lvm ;;
		n|N) echo "not adding to lvm group, you will need sudo privileges to mount" ;;
	esac
}

encode_enclave () {
	true
}

init_routine () {
	# make_fs_on_rnd
	echo "running init, generating random key"
	generate_random_key
}

#########################################################################|
#######~*~*~*~*~*~**~~*~**** "main" below *****~~~~*~*~*~*~*~*~*~*~*~*~*~|
####### top level code ##################################################|
####### for running function and io #####################################|
#########################################################################|

case $1 in
	'generate'|'g') generate_rnd_file ;;
	'config'|'c') config_procedure ;;
esac

echo "welcome to the enclave command-line interface!"
echo "~*~*~*~*~*~~*~*~*~ enjoy ~*~*~*~~*~*~*~*~*~*~*~"
PROMPT="encl-cli % <- "
read -p "$PROMPT" input

activate_enclave_fs
deactivate_enclave


while true
do
	case $input in
		q|Q|quit|exit) exit 0 ;;
		c|C|config) config_procedure ;;
		h|H|help) help ;;
		g|G|gen|generate) generate_rnd_file ;;
		i|init) init_routine ;;
	esac
	read -p "$PROMPT" input
done